// =============================================================================
// BASE ENTITY TYPES
// =============================================================================
// These types correspond directly to database table structures

/**
 * Source type for flashcards - indicates how the flashcard was created
 */
export type FlashcardSource = 'ai-full' | 'ai-edited' | 'manual';

/**
 * Base flashcard entity type corresponding to app.flashcards table
 */
export interface FlashcardEntity {
  id: string;
  userId: string;
  generationId: string | null;
  front: string;
  back: string;
  source: FlashcardSource;
  createdAt: string;
  updatedAt: string;
}

/**
 * Base generation entity type corresponding to app.generations table
 */
export interface GenerationEntity {
  id: string;
  userId: string;
  model: string;
  sourceTextHash: string;
  sourceTextLength: number;
  generatedCount: number;
  acceptedUneditedCount: number | null;
  acceptedEditedCount: number | null;
  rejectedCount: number;
  generationDuration: number;
  createdAt: string;
  updatedAt: string;
}

/**
 * Base generation error log entity type corresponding to app.generation_error_logs table
 */
export interface GenerationErrorLogEntity {
  id: string;
  userId: string;
  model: string | null;
  sourceTextHash: string | null;
  sourceTextLength: number | null;
  errorCode: string | null;
  errorMessage: string;
  createdAt: string;
}

// =============================================================================
// DTO TYPES (Data Transfer Objects)
// =============================================================================
// These types represent data structures sent in API responses

/**
 * Flashcard DTO for API responses - excludes sensitive user_id field
 */
export type FlashcardDTO = Omit<FlashcardEntity, 'userId'>;

/**
 * Generation log DTO for API responses - excludes sensitive user_id field
 */
export type GenerationLogDTO = Omit<GenerationEntity, 'userId'>;

/**
 * Pagination metadata for list responses
 */
export interface PaginationInfo {
  totalItems: number;
  totalPages: number;
  currentPage: number;
  limit: number;
}

/**
 * Paginated list response for flashcards
 */
export interface FlashcardsListResponse {
  data: FlashcardDTO[];
  pagination: PaginationInfo;
}

/**
 * Flashcard candidate generated by AI (before user review)
 */
export interface FlashcardCandidate {
  front: string;
  back: string;
  sourceFragment: string;
}

/**
 * Response for AI generation endpoint
 */
export interface GenerationResponse {
  generationId: string;
  generatedCount: number;
  generationDuration: number;
  candidates: FlashcardCandidate[];
}

// =============================================================================
// COMMAND TYPES (Request DTOs)
// =============================================================================
// These types represent data structures sent in API requests

/**
 * Command for creating a single flashcard
 */
export interface CreateFlashcardCommand {
  front: string;
  back: string;
  source: FlashcardSource;
  generationId?: string | null;
}

/**
 * Command for creating multiple flashcards (bulk operation)
 */
export type CreateFlashcardsCommand = CreateFlashcardCommand[];

/**
 * Command for updating an existing flashcard - only content fields are updatable
 */
export interface UpdateFlashcardCommand {
  front?: string;
  back?: string;
}

/**
 * Command for generating flashcards using AI
 */
export interface GenerateFlashcardsCommand {
  sourceText: string;
  model: string;
}

/**
 * Command for updating generation log with review session results
 */
export interface UpdateGenerationCommand {
  acceptedUneditedCount: number;
  acceptedEditedCount: number;
  rejectedCount: number;
}

// =============================================================================
// API ERROR TYPES
// =============================================================================

/**
 * Standard API error response structure
 */
export interface ApiError {
  error: string;
  message: string;
  details?: Record<string, any>;
}

/**
 * Validation error details for form submissions
 */
export interface ValidationError {
  field: string;
  message: string;
}

/**
 * API error response with validation details
 */
export interface ValidationApiError extends ApiError {
  validationErrors: ValidationError[];
}

// =============================================================================
// UTILITY TYPES
// =============================================================================

/**
 * Generic paginated response wrapper
 */
export interface PaginatedResponse<T> {
  data: T[];
  pagination: PaginationInfo;
}

/**
 * Generic API response wrapper for success cases
 */
export interface ApiResponse<T> {
  data: T;
  message?: string;
}

/**
 * Query parameters for listing flashcards
 */
export interface FlashcardsListQuery {
  page?: number;
  limit?: number;
  search?: string;
}
